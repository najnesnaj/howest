import numpy as np
from tensorflow import keras
import sys
from functions.random_data import generate_random_data  # Assumed to generate patterned data

def load_and_predict(input_array, model_path='pattern_classifier.keras', threshold=0.5):
    """
    Load the Keras model and predict if the input array has a pattern.
    
    Args:
        input_array (list or np.array): Array of 70 values in [0, 1].
        model_path (str): Path to the trained Keras model (default: 'pattern_classifier.keras').
        threshold (float): Probability threshold for classification (default: 0.5).
    
    Returns:
        tuple: (label, probability) where label is "has pattern" or "no pattern".
    """
    # Validate input
    input_array = np.array(input_array, dtype=float)
    if len(input_array) != 70:
        print(f"Error: Input array must contain exactly 70 values. Got {len(input_array)} values.")
        return None, None
    if not (np.all(input_array >= 0) and np.all(input_array <= 1)):
        print("Error: All values must be between 0 and 1.")
        return None, None
    
    # Load the model
    try:
        model = keras.models.load_model(model_path)
    except Exception as e:
        print(f"Error: Could not load model from {model_path}. {str(e)}")
        return None, None
    
    # Reshape input for the model (1, 70)
    input_array = input_array.reshape(1, 70)
    
    # Make prediction
    try:
        prediction = model.predict(input_array, verbose=0)[0][0]
        label = "has pattern" if prediction >= threshold else "no pattern"
        return label, prediction
    except Exception as e:
        print(f"Error during prediction: {str(e)}")
        return None, None

def test_patterned_data(num_tests=10, n=70):
    """
    Generate and test patterned data using generate_random_data.
    
    Args:
        num_tests (int): Number of patterned arrays to generate and test (default: 10).
        n (int): Length of each array (default: 70).
    """
    print("\nTesting 10 patterned arrays generated by generate_random_data:")
    print("-" * 60)
    for i in range(num_tests):
        # Generate patterned data
        try:
            patterned_array = generate_random_data(length=n)
        except Exception as e:
            print(f"Error generating patterned data for test {i+1}: {str(e)}")
            continue
        
        # Validate generated array
        if len(patterned_array) != n or not (np.all(np.array(patterned_array) >= 0) and np.all(np.array(patterned_array) <= 1)):
            print(f"Test {i+1}: Invalid generated array (length or range issue). Skipping.")
            continue
        
        # Predict
        label, probability = load_and_predict(patterned_array)
        if label is not None:
            print(f"Test {i+1}:")
            print(f"Array: {np.round(patterned_array, 6)}")
            print(f"Prediction: The array {label}.")
            print(f"Probability of having a pattern: {probability:.6f}")
            print("-" * 60)

def main():
    # Example input array (replace with your own or pass via command line)
    example_array = [
        0.734500, 0.012759, 0.0, 0.161085, 0.188198, 0.173844, 0.323764, 0.288676, 0.492823,
        0.629984, 0.582137, 0.719298, 0.299841, 0.288676, 0.430622, 0.272727, 0.191388,
        0.197767, 0.287081, 0.373206, 0.698556, 0.668262, 0.609250, 0.561404, 0.303030,
        0.271132, 0.258373, 0.452951, 0.111643, 0.221691, 0.296651, 0.223285, 0.349282,
        0.486443, 0.665072, 0.810207, 0.724083, 0.842105, 0.821372, 0.688995, 0.856459,
        0.454545, 0.822967, 1.0, 0.481659, 0.521531, 0.169059, 0.300478, 0.425199,
        0.446571, 0.649123, 0.720096, 0.840510, 0.681021, 0.407656, 0.237002, 0.114833,
        0.278469, 0.586124, 0.492026, 0.328992, 0.432200, 0.612813, 0.636950, 0.456805,
        0.734500, 0.012759, 0.0, 0.161085, 0.188198
    ]
    
    # Truncate or pad the example array to exactly 70 values
    example_array = example_array[:70] if len(example_array) > 70 else example_array + [0] * (70 - len(example_array))
    
    # Run prediction on example array
    print("Running prediction on example array...")
    label, probability = load_and_predict(example_array)
    if label is not None:
        print(f"Prediction: The example array {label}.")
        print(f"Probability of having a pattern: {probability:.6f}")
    
    # Test 10 patterned arrays
    test_patterned_data(num_tests=10, n=70)

if __name__ == "__main__":
    # Optionally, accept input array from command line as a comma-separated string
    if len(sys.argv) > 1:
        try:
            input_array = [float(x) for x in sys.argv[1].split(',')]
            print("Running prediction on command-line input array...")
            label, probability = load_and_predict(input_array)
            if label is not None:
                print(f"Prediction: The input array {label}.")
                print(f"Probability of having a pattern: {probability:.6f}")
        except ValueError:
            print("Error: Command-line input must be a comma-separated list of 70 numbers.")
    
    # Run main function (example array and 10 patterned arrays)
    main()
